{"version":3,"sources":["../../server/controllers/orderController.js"],"names":["orderController","req","res","getAll","i","length","body","id","json","message","error","push","order","j","parseInt","user","qty","food","amount","status"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;;;;;AAEA;;;IAGMA,e;;;;;;;;AACJ;;;;;;;2BAMmBC,G,EAAKC,G,EAAK;AAC3B,wCAAgBC,MAAhB,qBAA8BF,GAA9B,EAAmCC,GAAnC;AACD;;;;;AAED;;;;;;;;;;wBAMgBD,G,EAAKC,G,EAAK;AACxB,aAAK,IAAIE,IAAI,CAAb,EAAgBA,IAAI,mBAAMC,MAA1B,EAAkCD,KAAK,CAAvC,EAA0C;AACxC,cAAIH,IAAIK,IAAJ,CAASC,EAAT,KAAgB,mBAAMH,CAAN,EAASG,EAA7B,EAAiC;AAC/B,mBAAOL,IAAIM,IAAJ,CAAS;AACdC,uBAAS,wBADK;AAEdC,qBAAO;AAFO,aAAT,CAAP;AAID,WALD,MAKO,IAAI,CAACT,IAAIK,IAAJ,CAASC,EAAd,EAAkB;AACvB,mBAAOL,IAAIM,IAAJ,CAAS;AACdC,uBAAS,gBADK;AAEdC,qBAAO;AAFO,aAAT,CAAP;AAID;AACF;AACD,2BAAMC,IAAN,CAAWV,IAAIK,IAAf;AACA,eAAOJ,IAAIM,IAAJ,CAAS;AACdI,mCADc;AAEdH,mBAAS,SAFK;AAGdC,iBAAO;AAHO,SAAT,CAAP;AAKD;;;;;AAED;;;;;;;;;;2BAMmBT,G,EAAKC,G,EAAK;AAC3B,aAAK,IAAIW,IAAI,CAAb,EAAgBA,IAAI,mBAAMR,MAA1B,EAAkCQ,KAAK,CAAvC,EAA0C;AACxC,cAAI,mBAAMA,CAAN,EAASN,EAAT,KAAgBO,SAASb,IAAIK,IAAJ,CAASC,EAAlB,EAAsB,EAAtB,CAApB,EAA+C;AAC7C,+BAAMM,CAAN,EAASE,IAAT,GAAgBd,IAAIK,IAAJ,CAASS,IAAzB;AACA,+BAAMF,CAAN,EAASG,GAAT,GAAef,IAAIK,IAAJ,CAASU,GAAxB;AACA,+BAAMH,CAAN,EAASI,IAAT,GAAgBhB,IAAIK,IAAJ,CAASW,IAAzB;AACA,+BAAMJ,CAAN,EAASK,MAAT,GAAkBjB,IAAIK,IAAJ,CAASY,MAA3B;AACA,mBAAOhB,IAAIM,IAAJ,CAAS;AACdI,qBAAO,mBAAMC,CAAN,CADO;AAEdJ,uBAAS,mBAFK;AAGdC,qBAAO;AAHO,aAAT,CAAP;AAKD;AACF;AACD,eAAOR,IAAIiB,MAAJ,CAAW,GAAX,EAAgBX,IAAhB,CAAqB;AAC1BC,mBAAS,WADiB;AAE1BC,iBAAO;AAFmB,SAArB,CAAP;AAID;;;;;;;;;qBAGYV,e","file":"orderController.js","sourcesContent":["import order from './../models/order';\r\nimport controlFunction from './controllerFunction';\r\n\r\n/**\r\n * it is a class that control all order api;\r\n */\r\nclass orderController {\r\n  /**\r\n       * it GET all order\r\n       * @param {string} req\r\n       * @param {string} res\r\n       * @returns {object} all order\r\n       */\r\n  static getAllOrder(req, res) {\r\n    controlFunction.getAll(order, req, res);\r\n  }\r\n\r\n  /**\r\n       * it ADD a order\r\n       * @param {string} req\r\n       * @param {string} res\r\n       * @returns {object} add order\r\n       */\r\n  static addOrder(req, res) {\r\n    for (let i = 0; i < order.length; i += 1) {\r\n      if (req.body.id === order[i].id) {\r\n        return res.json({\r\n          message: 'id is already existing',\r\n          error: true\r\n        });\r\n      } else if (!req.body.id) {\r\n        return res.json({\r\n          message: 'id is required',\r\n          error: true\r\n        });\r\n      }\r\n    }\r\n    order.push(req.body);\r\n    return res.json({\r\n      order,\r\n      message: 'Success',\r\n      error: false\r\n    });\r\n  }\r\n\r\n  /**\r\n       * it PUT(update) an order\r\n       * @param {string} req\r\n       * @param {string} res\r\n       * @returns {object} PUT(update) an order\r\n       */\r\n  static updateorder(req, res) {\r\n    for (let j = 0; j < order.length; j += 1) {\r\n      if (order[j].id === parseInt(req.body.id, 10)) {\r\n        order[j].user = req.body.user;\r\n        order[j].qty = req.body.qty;\r\n        order[j].food = req.body.food;\r\n        order[j].amount = req.body.amount;\r\n        return res.json({\r\n          order: order[j],\r\n          message: 'Update Successful',\r\n          error: false\r\n        });\r\n      }\r\n    }\r\n    return res.status(404).json({\r\n      message: 'not found',\r\n      error: true\r\n    });\r\n  }\r\n}\r\n\r\nexport default orderController;\r\n"]}